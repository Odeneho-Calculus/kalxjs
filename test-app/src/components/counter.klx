<template>
  <div class="counter-page">
    <h1>Counter Example</h1>

    <div class="counter-container">
      <div class="counter-display">
        <div class="counter-value" id="counter-value">{{ count }}</div>
        <div class="counter-label">Current Count</div>
      </div>

      <div class="counter-controls">
        <button id="decrement-button" class="counter-button decrement" data-event-decrement="click">-</button>
        <button id="reset-button" class="counter-button reset" data-event-reset="click">Reset</button>
        <button id="increment-button" class="counter-button increment" data-event-increment="click">+</button>
      </div>

      <div class="counter-stats">
        <div class="stat-item">
          <div class="stat-label">Double Count:</div>
          <div class="stat-value" id="double-count">{{ doubleCount }}</div>
        </div>

        <div class="stat-item">
          <div class="stat-label">Is Even:</div>
          <div class="stat-value" id="is-even">{{ isEven }}</div>
        </div>
      </div>
    </div>

    <div class="counter-actions">
      <a href="#/" class="nav-link">Back to Home</a>
    </div>
  </div>
</template>

<script>
import { defineComponent } from '@kalxjs/core';

export default {
  name: 'CounterComponent',

  data() {
    return {
      count: 0
    };
  },

  computed: {
    doubleCount() {
      return this.count * 2;
    },

    isEven() {
      return this.count % 2 === 0 ? 'Yes' : 'No';
    }
  },

  methods: {
    increment() {
      this.count++;
      this.updateCounter();
    },

    decrement() {
      this.count--;
      this.updateCounter();
    },

    reset() {
      this.count = 0;
      this.updateCounter();
    },

    updateCounter() {
      const counterValue = document.getElementById('counter-value');
      const doubleCount = document.getElementById('double-count');
      const isEven = document.getElementById('is-even');

      if (counterValue) {
        counterValue.textContent = this.count;

        // Add animation class
        counterValue.classList.add('updated');
        setTimeout(() => {
          counterValue.classList.remove('updated');
        }, 300);
      }

      if (doubleCount) {
        doubleCount.textContent = this.doubleCount;
      }

      if (isEven) {
        isEven.textContent = this.isEven;
      }
    }
  },

  mounted() {
    console.log('Counter component mounted!');
  }
};
</script>

<style>
.counter-page {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
  font-family: Arial, sans-serif;
}

.counter-container {
  background-color: #f9f9f9;
  border-radius: 8px;
  padding: 2rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.counter-display {
  margin-bottom: 2rem;
}

.counter-value {
  font-size: 4rem;
  font-weight: bold;
  color: #42b883;
  margin-bottom: 0.5rem;
}

.counter-label {
  color: #666;
  font-size: 1.2rem;
}

.counter-controls {
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin-bottom: 2rem;
}

.counter-button {
  background-color: #42b883;
  color: white;
  border: none;
  border-radius: 50%;
  font-size: 1.5rem;
  width: 50px;
  height: 50px;
  cursor: pointer;
}

.counter-button.reset {
  background-color: #7f8c8d;
  font-size: 0.9rem;
}

.counter-button.decrement {
  background-color: #e74c3c;
}

.counter-stats {
  display: flex;
  justify-content: center;
  gap: 3rem;
}

.stat-item {
  text-align: center;
}

.stat-label {
  font-size: 0.9rem;
  color: #666;
  margin-bottom: 0.5rem;
}

.stat-value {
  font-size: 1.5rem;
  font-weight: bold;
  color: #35495e;
}

.counter-actions {
  margin-top: 2rem;
  text-align: center;
}

.nav-link {
  color: #42b883;
  text-decoration: none;
  font-weight: bold;
}

.nav-link:hover {
  text-decoration: underline;
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.05); }
  100% { transform: scale(1); }
}

.counter-value.updated {
  animation: pulse 0.3s ease;
}
</style>
