<template>
  <button 
    :class="[
      'button', 
      primary ? 'primary' : 'secondary',
      size,
      { 'full-width': fullWidth, 'icon-only': iconOnly }
    ]" 
    @click="handleClick"
    :disabled="disabled || loading"
    :type="type"
  >
    <span v-if="loading" class="spinner"></span>
    <span v-else-if="icon" class="icon">{{ icon }}</span>
    <span v-if="!iconOnly" class="text">{{ text }}</span>
    <slot></slot>
  </button>
</template>

<script>
<template>
  <button 
    :class="[
      'button', 
      primary ? 'primary' : 'secondary',
      size,
      { 'full-width': fullWidth, 'icon-only': iconOnly }
    ]" 
    @click="handleClick"
    :disabled="disabled || loading"
    :type="type"
  >
    <span v-if="loading" class="spinner"></span>
    <span v-else-if="icon" class="icon">{{ icon }}</span>
    <span v-if="!iconOnly" class="text">{{ text }}</span>
    <slot></slot>
  </button>
</template>

<script>
<template>
  <button 
    :class="[
      'button', 
      primary ? 'primary' : 'secondary',
      size,
      { 'full-width': fullWidth, 'icon-only': iconOnly }
    ]" 
    @click="handleClick"
    :disabled="disabled || loading"
    :type="type"
  >
    <span v-if="loading" class="spinner"></span>
    <span v-else-if="icon" class="icon">{{ icon }}</span>
    <span v-if="!iconOnly" class="text">{{ text }}</span>
    <slot></slot>
  </button>
</template>

<script>
import { defineComponent } from '@kalxjs/core';

export default defineComponent({
  name: 'Button',
  props: {
    text: {
      type: String,
      default: ''
    },
    primary: {
      type: Boolean,
      default: false
    },
    secondary: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: 'medium',
      validator: (value) => ['small', 'medium', 'large'].includes(value)
    },
    fullWidth: {
      type: Boolean,
      default: false
    },
    icon: {
      type: String,
      default: ''
    },
    iconOnly: {
      type: Boolean,
      default: false
    },
    loading: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    type: {
      type: String,
      default: 'button',
      validator: (value) => ['button', 'submit', 'reset'].includes(value)
    }
  },
  
  setup(props, { emit }) {
    const handleClick = (event) => {
      if (!props.disabled && !props.loading) {
        emit('click', event);
      }
    };

    return { handleClick };
  }
});
</script>

<style>
.button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-family: inherit;
  font-weight: 500;
  transition: background-color 0.2s, transform 0.1s, box-shadow 0.2s;
  position: relative;
  overflow: hidden;
}

.button:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.5);
}

.button:active {
  transform: translateY(1px);
}

.button.disabled, .button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Sizes */
.button.small {
  padding: 0.25rem 0.75rem;
  font-size: 0.875rem;
}

.button.medium {
  padding: 0.5rem 1rem;
  font-size: 1rem;
}

.button.large {
  padding: 0.75rem 1.5rem;
  font-size: 1.125rem;
}

/* Variants */
.button.primary {
  background-color: #4299e1;
  color: white;
}

.button.primary:hover:not(:disabled):not(.disabled) {
  background-color: #3182ce;
}

.button.secondary {
  background-color: #e2e8f0;
  color: #4a5568;
}

.button.secondary:hover:not(:disabled):not(.disabled) {
  background-color: #cbd5e0;
}

/* Full width */
.button.full-width {
  width: 100%;
}

/* Icon styles */
.button .icon {
  margin-right: 0.5rem;
}

.button.icon-only {
  padding: 0.5rem;
  border-radius: 50%;
}

.button.icon-only.small {
  padding: 0.25rem;
}

.button.icon-only.large {
  padding: 0.75rem;
}

/* Loading spinner */
.spinner {
  width: 1em;
  height: 1em;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 0.8s linear infinite;
  margin-right: 0.5rem;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.button.secondary .spinner {
  border-color: rgba(74, 85, 104, 0.3);
  border-top-color: #4a5568;
}
</style>
