<template>
  <div class="user">
    <!-- Loading state -->
    <div v-if="loading" class="loading-state">
      <h2>Loading User Data...</h2>
      <div class="loading-indicator">
        <div class="spinner"></div>
        <span>Please wait...</span>
      </div>
    </div>
    
    <!-- Error state -->
    <div v-else-if="error" class="error-state">
      <h2>Error</h2>
      <p class="error-message">{{ error }}</p>
      <button class="primary-button" @click="goBack">Back to Home</button>
    </div>
    
    <!-- User profile -->
    <div v-else class="user-profile">
      <h2>{{ pageTitle }}</h2>
      
      <!-- User info card -->
      <div class="user-card">
        <div class="user-header">
          <div class="user-avatar">{{ user?.name?.charAt(0) || 'U' }}</div>
          <div class="user-info">
            <h3>{{ user?.name }}</h3>
            <p>{{ user?.email }}</p>
          </div>
        </div>
        
        <div class="user-details">
          <p>
            <strong>User ID: </strong>
            <span>{{ userId }}</span>
          </p>
          <p>
            <strong>Role: </strong>
            <span class="role-badge" :class="user?.role.toLowerCase()">{{ user?.role }}</span>
          </p>
        </div>
      </div>
      
      <!-- Navigation buttons -->
      <div class="action-buttons">
        <button class="primary-button" @click="goBack">
          <span>Back to Home</span>
          <span v-if="isHomeActive" class="status-badge">Active</span>
        </button>
        
        <button class="success-button" @click="goToNextUser">Next User</button>
      </div>
    </div>
  </div>
</template>

<script>
import { defineComponent, ref, computed, onMounted, watch } from '@kalxjs/core';
import { useRouter, RouterLink } from '@kalxjs/router';

export default defineComponent({
  name: 'User',
  components: {
    RouterLink
  },
  
  // Accept route params as props (enabled by props: true in router config)
  props: {
    id: {
      type: String,
      required: true
    }
  },
  
  setup(props) {
    // Use the enhanced router composition API
    const { 
      params,           // Route params (reactive)
      query,            // Query parameters (reactive)
      meta,             // Route meta data (reactive)
      push,             // Navigation method (returns Promise)
      replace,          // Replace navigation method (returns Promise)
      isActive,         // Check if route is active (non-exact)
      isExactActive     // Check if route is exactly active
    } = useRouter();
    
    // Local state
    const user = ref(null);
    const loading = ref(true);
    const error = ref(null);
    
    // Computed properties
    const userId = computed(() => props.id || params.value.id);
    const pageTitle = computed(() => meta.value.title || 'User Profile');
    const isHomeActive = computed(() => isActive('/'));
    
    // Methods
    const goBack = async () => {
      try {
        // Promise-based navigation
        await push('/');
        console.log('Navigation to home successful');
      } catch (err) {
        console.error('Navigation failed:', err);
      }
    };
    
    const goToNextUser = async () => {
      const nextId = parseInt(userId.value) + 1;
      try {
        // Navigate to another user with replace (doesn't add to history)
        await replace(`/user/${nextId}`);
      } catch (err) {
        console.error('Navigation failed:', err);
      }
    };
    
    // Simulate fetching user data
    const fetchUserData = async (id) => {
      loading.value = true;
      error.value = null;
      
      try {
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Mock user data
        user.value = {
          id,
          name: `User ${id}`,
          email: `user${id}@example.com`,
          role: id % 2 === 0 ? 'Admin' : 'User'
        };
      } catch (err) {
        error.value = 'Failed to load user data';
        console.error(err);
      } finally {
        loading.value = false;
      }
    };
    
    // Watch for changes to user ID (for navigation between users)
    onMounted(() => {
      fetchUserData(userId.value);
    });
    
    // Watch for route param changes to reload data when navigating between users
    watch(() => userId.value, (newId) => {
      fetchUserData(newId);
    });
    
    return { 
      user, 
      loading, 
      error, 
      userId, 
      pageTitle,
      isHomeActive,
      goBack, 
      goToNextUser 
    };
  }
});
</script>

<style>
.user {
  padding: 1.5rem;
  max-width: 800px;
  margin: 0 auto;
}

h2 {
  color: #4a5568;
  margin-bottom: 1.5rem;
}

.loading-state, .error-state {
  text-align: center;
  padding: 2rem;
}

.loading-indicator {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 2rem;
}

.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid rgba(66, 153, 225, 0.2);
  border-radius: 50%;
  border-top-color: #4299e1;
  animation: spin 1s linear infinite;
  margin-bottom: 1rem;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.error-message {
  color: #e53e3e;
  margin-bottom: 1.5rem;
}

.user-card {
  background-color: white;
  border-radius: 8px;
  padding: 1.5rem;
  margin: 1rem 0;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.user-header {
  display: flex;
  align-items: center;
  margin-bottom: 1rem;
}

.user-avatar {
  width: 60px;
  height: 60px;
  border-radius: 30px;
  background-color: #4299e1;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  font-size: 1.5rem;
  margin-right: 1rem;
}

.user-info h3 {
  margin: 0;
  color: #2d3748;
  font-size: 1.25rem;
}

.user-info p {
  margin: 0.25rem 0 0;
  color: #718096;
}

.user-details {
  margin: 1rem 0;
  padding: 0.75rem 0;
  border-top: 1px solid #e2e8f0;
  border-bottom: 1px solid #e2e8f0;
}

.user-details p {
  margin: 0.5rem 0;
}

.role-badge {
  display: inline-block;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  font-size: 0.875rem;
}

.role-badge.admin {
  background-color: #ebf8ff;
  color: #3182ce;
}

.role-badge.user {
  background-color: #f0fff4;
  color: #38a169;
}

.action-buttons {
  display: flex;
  gap: 1rem;
  margin-top: 1.5rem;
}

.primary-button, .success-button {
  padding: 0.75rem 1.25rem;
  border-radius: 4px;
  font-weight: 500;
  border: none;
  cursor: pointer;
  transition: background-color 0.3s;
  display: flex;
  align-items: center;
}

.primary-button {
  background-color: #4299e1;
  color: white;
}

.primary-button:hover {
  background-color: #3182ce;
}

.success-button {
  background-color: #48bb78;
  color: white;
}

.success-button:hover {
  background-color: #38a169;
}

.status-badge {
  margin-left: 0.5rem;
  font-size: 0.75rem;
  padding: 0.125rem 0.375rem;
  border-radius: 9999px;
  background-color: #3182ce;
  color: white;
}

@media (max-width: 640px) {
  .action-buttons {
    flex-direction: column;
  }
  
  .user-header {
    flex-direction: column;
    text-align: center;
  }
  
  .user-avatar {
    margin-right: 0;
    margin-bottom: 1rem;
  }
}
</style>
