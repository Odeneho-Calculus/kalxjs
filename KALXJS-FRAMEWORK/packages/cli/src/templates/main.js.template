import { createApp } from '@kalxjs/core';
import App from './core/App.js';
import { createRouter } from './navigation';
import { createStore } from './state';
import { registerPlugins } from './extensions';
// Import global styles
import './styles/main.scss';
// Import application configuration
import appConfig from '../config/app.config.js';

// Package versions - these are hardcoded to avoid import errors
const versions = {
  core: '1.0.0',
  router: '1.0.0',
  state: '1.0.0',
  utils: '1.0.0',
  devtools: '1.0.0'
};

// Log application startup
console.log('ðŸš€ KALXJS Framework - Starting application');
console.log('ðŸ“¦ Package versions:');
Object.entries(versions).forEach(([pkg, ver]) => {
  console.log(`  â€¢ ${pkg.charAt(0).toUpperCase() + pkg.slice(1)}: ${ver}`);
});

// Create the app instance with configuration
const app = createApp(App, {
  debug: appConfig.env.development.debug,
  appName: appConfig.name,
  version: appConfig.version
});

// Register global error handler
app.config.errorHandler = (err, instance, info) => {
  console.error('Application Error:', err);
  console.log('Error occurred in component:', instance);
  console.log('Error info:', info);
  
  // You could also send errors to a monitoring service here
};

// Also catch unhandled errors
window.addEventListener('error', (event) => {
  console.error('Unhandled Error:', event.error);
});

// Initialize router
const router = createRouter();
app.use(router);

// Expose router globally for direct access
window.router = router;

// Initialize store
const store = createStore();
app.use(store);

// Register plugins
registerPlugins(app);

// Enable development tools in development mode
if (appConfig.env.development.debug) {
  // Create a simple devtools implementation
  const setupDevTools = (app, options) => {
    console.log('DevTools initialized with options:', options);
    window.__KALXJS_DEVTOOLS__ = {
      app,
      options,
      enabled: true,
      version: versions.devtools
    };
    return window.__KALXJS_DEVTOOLS__;
  };
  
  setupDevTools(app, {
    logLifecycleEvents: true,
    performanceMonitoring: true
  });
}

// Function to mount the app when the DOM is fully loaded
function mountApp() {
  // Mount the app to the DOM
  app.mount('#app');
  console.log('ðŸŽ‰ KALXJS application successfully mounted');
}

// Wait for the DOM and stylesheets to be fully loaded before mounting
if (document.readyState === 'complete') {
  // If already loaded, mount immediately
  mountApp();
} else {
  // Otherwise, wait for the load event
  window.addEventListener('load', mountApp);
}

// Application is now running

// Add fallback rendering in case the main mounting fails
setTimeout(() => {
  const appElement = document.getElementById('app');
  if (appElement && (appElement.innerHTML.includes('<!--empty node-->') || appElement.innerHTML.trim() === '')) {
    console.log('Fallback rendering activated');
    appElement.innerHTML = `
      <div style="max-width: 800px; margin: 0 auto; padding: 2rem; text-align: center;">
        <h1 style="color: #42b883;">Welcome to KalxJS</h1>
        <p>This is a simple counter example:</p>
        <div style="display: flex; justify-content: center; align-items: center; gap: 1rem; margin-top: 2rem;">
          <button id="decrement-btn" style="background-color: #42b883; color: white; border: none; border-radius: 4px; padding: 0.5rem 1rem; font-size: 1.2rem; cursor: pointer;">-</button>
          <span id="counter-value" style="font-size: 2rem; font-weight: bold;">0</span>
          <button id="increment-btn" style="background-color: #42b883; color: white; border: none; border-radius: 4px; padding: 0.5rem 1rem; font-size: 1.2rem; cursor: pointer;">+</button>
        </div>
      </div>
    `;
    
    // Add minimal interactivity
    const counterValue = document.getElementById('counter-value');
    const decrementBtn = document.getElementById('decrement-btn');
    const incrementBtn = document.getElementById('increment-btn');
    
    let count = 0;
    
    decrementBtn.addEventListener('click', () => {
      count--;
      counterValue.textContent = count;
    });
    
    incrementBtn.addEventListener('click', () => {
      count++;
      counterValue.textContent = count;
    });
  }
}, 1000);